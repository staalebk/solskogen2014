; Coding for the trusty 6502
	processor 6502

; Zero page defines:
	SEG.U VARS
	ORG $80
intcount1	ds 1
intcount2	ds 1
scrollbit	ds 1
scrollchr	ds 1
scrollpos   ds 1
iscrollbit	ds 1
iscrollchr	ds 1
iscrollpos  ds 1
counter     ds 1
scene		ds 1
sinpos      ds 1

	echo "----",($100 - *) , "bytes of RAM left"
	SEG CODE


; Lets make this stuff autoload address on 4096
	SEG	
	org $0801
	.byte $0c,$08,$0a,$00,$9e,$20,$34,$30,$39,$36,$00,$00,$00

	org $840
	;-------------------------------------------------------------------------------------
;       Sprite No: 0
;          Colour: 7
;  Multi Colour 0: 2
;  Multi Colour 1: 6
;            Size: Normal
;-------------------------------------------------------------------------------------
	.byte 0,16,0,0,24,0,0,24,0,0,24,0,0,20,0,0,20,0,0,38
	.byte 0,0,66,0,3,131,0,4,1,0,8,1,0,16,1,0,32,67,224,32
	.byte 62,16,32,0,16,16,0,16,16,0,16,15,128,224,0,127,0,0,0,0
	.byte 0,0,0,0
;-------------------------------------------------------------------------------------
	

	
; Our entry point
	org $1000
	lda #$00
	tax
	lda #$00
	tay
	lda #$0B
	jsr $BC00

	lda #$21	; sprpits at 1400
	sta $07f8
	lda #%0000001 ;enable spriit 1
	lda #$FF
    sta $d015
	
	lda #$80  ;Middle of screen
    sta $d000
    sta $d001
	

	
; clear interrupts
	sei
	lda #$7f
	sta $dc0d	;disable timer interrupts which can be generated by the two CIA chips
	sta $dd0d	;the kernal uses such an interrupt to flash the cursor and scan the keyboard, so we better
				;stop it.	
	lda $dc0d	;by reading this two registers we negate any pending CIA irqs.
	lda $dd0d	;if we don't do this, a pending CIA irq might occur after we finish setting up our irq.
				;we don't want that to happen.
				
	lda #$35	;we turn off the BASIC and KERNAL rom here
	sta $01		;the cpu now sees RAM everywhere except at $d000-$e000, where still the registers of
				;SID/VICII/etc are visible
				
	lda #<irq	;this is how we set up
	sta $fffe	;the address of our interrupt code
	lda #>irq
	sta $ffff
	
	lda #$01   ;this is how to tell the VICII to generate a raster interrupt
	sta $d01a

	lda #$00   ;this is how to tell at which rasterline we want the irq to be triggered
	sta $d012

	lda #$1b   ;as there are more than 256 rasterlines, the topmost bit of $d011 serves as
	sta $d011  ;the 8th bit for the rasterline we want our irq to be triggered.
           ;here we simply set up a character screen, leaving the topmost bit 0.
		   
	lda #$c1   ; set the scroll as far left as possible.
	sta $d016
	sta scrollbit
		   
	lda #$1E	; Set the character map to be @ 0x3800
	sta $d018




;	asl $d019
; zero some stuff
	lda #$00
	sta intcount1
	sta intcount2
	sta scrollchr
	sta scrollpos
	sta sinpos
	jsr	clearscr
	
	
	cli			;enable maskable interrupts again

	jmp *	;we better don't RTS, the ROMS are now switched off, there's no way back to the system


clearscr:	ldx #$00
		lda #$20
clearscrl: sta $0400,x
		sta $0500,x
        sta $0600,x
  ;      sta $0700,x
        dex
        bne clearscrl
	
dark:	lda $d020 ;copy border color into
		sta $d021 ;main area color
		lda #$00
		sta $d020 ; Black border
		sta $d021 ; black main
		
		
		ldx #$00
color:	lda #$00
		sta $d800,x
		sta $d900,x
		sta $da00,x
		sta $db00,x
		inx
		cpx #$00
		bne color
		
		ldx #$00
colorhead:	lda #$03
		sta $d800,x
		inx
		cpx #$A0
		bne colorhead
		rts

; First move everything one step to the left
fillr	ldx #$00
.loopr	lda $0429,x
		sta $0428,x
		lda $0451,x
		sta $0450,x
		inx
		cpx #$28
		bne .loopr
; Now fill in more juicy stuff on the far right
		lda scrollchr
		cmp #$00
		beq newchar
oldchar	ldx scrollpos
		lda msgz,x
		clc
		adc #$40
		sta $044f
		clc
		adc #$40
		sta $0477
		lda #$00
		sta scrollchr
		inc scrollpos
		rts
		
newchar	ldx scrollpos
		lda msgz,x
		sta $0477
		sec
		sbc #$40
		sta $044f
		inc scrollchr
		rts
		
		
		
dscroll	dec scrollbit
;		dec scrollbit  ; Double speed
		lda scrollbit
		cmp #$bf
		bne setsrll
		jsr fillr
		lda #$c7
		sta scrollbit

setsrll sta $d016
		rts








; First move everything one step to the left
ifillr	ldx #$00
.iloopr	lda $0749,x
		sta $0748,x
		lda $0771,x
		sta $0770,x
		inx
		cpx #$28
		bne .iloopr
; Now fill in more juicy stuff on the far right
		lda iscrollchr
		cmp #$00
		beq inewchar
ioldchar	ldx iscrollpos
		lda msgpoo,x
		clc
		adc #$40
		sta $076F
		clc
		adc #$40
		sta $0797
		lda #$00
		sta iscrollchr
		inc iscrollpos
		rts
		
inewchar	ldx iscrollpos
		lda msgpoo,x
		sta $0797
		sec
		sbc #$40
		sta $076F
		inc iscrollchr
		rts
		
		
		
iscroll	dec iscrollbit
		dec iscrollbit  ; Double speed
		lda iscrollbit
		cmp #$bf
		bne isetsrll
		jsr ifillr
		lda #$c7
		sta iscrollbit

isetsrll sta $d016
		rts



irq2	lda #<colourbars	;this is how we set up
		sta $fffe	;the address of our interrupt code
		lda #>colourbars
		sta $ffff
		lda #$D9  ;this is how to tell at which rasterline we want the irq to be triggered
		sta $d012
				jsr iscroll
				asl $d019
				RTI

colourbars  asl $d019               ; acknowledge interrupt	

            lda #00                 ; init raster counter
            sta counter

            ldx index
            ldy counter
            lda delaytable,y
            sbc #01
            bne colourbars+15
            lda colourtable,x      ; set background colour
            sta $d021
            inx
            txa
            and #15
            tax
            iny
            cpy #16
            nop
            bne colourbars+12
resetColour ldy #8                  ; back to black background
            dey
            bne resetColour+2
            ldy #0
            sty $d021

            lda #<update            ; point to next interrupt
            ldx #>update
            sta $fffe
            stx $ffff

            lda #250                ; set trigger line
            sta $d012	
			RTI
			
update      dec smooth              ; apply smoothing to animation
            bne update+20
            lda #03
            sta smooth
            lda index               ; cycle start colour
            adc #01
            and #15
            sta index

            asl $d019               ; acknowledge interrupt


out:		lda #<irq	;this is how we set up
		sta $fffe	;the address of our interrupt code
		lda #>irq
		sta $ffff
		lda #$00   ;this is how to tell at which rasterline we want the irq to be triggered
		sta $d012
		

		
	
        RTI
	;Being all kernal irq handlers switched off we have to do more work by ourselves.
	;When an interrupt happens the CPU will stop what its doing, store the status and return address
	;into the stack, and then jump to the interrupt routine. It will not store other registers, and if
	;we destroy the value of A/X/Y in the interrupt routine, then when returning from the interrupt to
	;what the CPU was doing will lead to unpredictable results (most probably a crash). So we better
	;store those registers, and restore their original value before reentering the code the CPU was
	;interrupted running.

	;If you won't change the value of a register you are safe to not to store / restore its value.
	;However, it's easy to screw up code like that with later modifying it to use another register too
	;and forgetting about storing its state.

	;The method shown here to store the registers is the most orthodox and most failsafe.
irq     STA $02
        LDA $DC0D
        STX $03
        STY $04
;	Stack is now saved, lets party!
;		inc $d020		;  visualize interrupt
		jsr $BC03 ;Play some music
		; Lets see what we should be doing...
;init	lda #$00
;		cmp intcount1
;		bne dscr
;		cmp intcount2
;		bne dscr
		;jsr clearscr
;		jsr draw

	inc sinpos
	ldx sinpos
	lda sine,x
    sta $d000
	lda cosine,x
    sta $d001
		
dscr	lda #$50
		cmp intcount1
		bne prescr
prescr	lda #$00
		cmp intcount2
		;bne timer
		jsr dscroll
		;jsr iscroll
		
timer	inc intcount1
		lda intcount1
		cmp #$00
		bne restore
		inc intcount2
		
		
		
;	Restore stack
;restore	dec $d020	; visualize interrupt	lda #<irq	;this is how we set up
restore		lda #<irq2	;this is how we set up
		sta $fffe	;the address of our interrupt code
		lda #>irq2
		sta $ffff
		lda #$70  ;this is how to tell at which rasterline we want the irq to be triggered
		sta $d012

		LDA #$0F
        STA $D019
        LDY $04
        LDX $03
        LDA $02
        RTI

msgz .byte "````````````````````INDIEPOO`PRESENTS``````````EVRY`THING`IS`AWESOME```````````````MUSIC`BY`RESPONSE`OF`DARKLITE`````````FONT`BY`QUARRYMAN```````````CODE`BY`CHILLER````````````````````````````"
;msgz .byte "LOREMIPS`LOREMLIP``````````XXXX`THING`XX`XXXXXXX```````````````"

msgpoo .byte "INDILOL`INDIPOO`INDINO`INDIBAD`INDIBLUE`INDIDOG`INDILAST`INDINOT`INDIPET`INDISICK`INDITHICK`INDIFAT`INDISCHNAPPSED`INDILOW`INDISAD`INDIDONG`INDIITCH`INDIPIG`INDIPEEP`INDICHEAP`INDIBLOW`INDIGOAT`INDIJOKE`INDIPOOR`INDITEAR`INDIJAR`INDICRAP`INDISLIP`INDISPIN``````";`INDIWEEP"
index       .byte 00                ; starting colour index
smooth      .byte 03                
delaytable	.byte $08,$03,$08,$08,$08,$08,$08,$08
            .byte $08,$03,$08,$08,$08,$08,$08,$04
colourtable .byte 13, 03, 14, 04, 06, 04, 14, 13
			.byte 7,10,8,2,9,2,8,10
			
sine dc.b 125,123,121,119,117,115,113,112,110,108,106,104,103,101,99,97
	dc.b 96,94,92,91,89,87,86,84,83,81,80,78,77,75,74,73
	dc.b 71,70,69,68,66,65,64,63,62,61,60,59,58,57,57,56
	dc.b 55,54,54,53,53,52,52,51,51,51,50,50,50,50,50,50
	dc.b 50,50,50,50,50,50,50,51,51,51,52,52,53,53,54,55
	dc.b 55,56,57,58,59,60,60,61,62,64,65,66,67,68,69,71
	dc.b 72,73,75,76,77,79,80,82,83,85,87,88,90,91,93,95
	dc.b 97,98,100,102,104,105,107,109,111,113,114,116,118,120,122,124
	dc.b 125,127,129,131,133,135,136,138,140,142,144,145,147,149,151,152
	dc.b 154,156,158,159,161,162,164,166,167,169,170,172,173,174,176,177
	dc.b 178,180,181,182,183,184,185,187,188,189,189,190,191,192,193,194
	dc.b 194,195,196,196,197,197,198,198,198,199,199,199,199,199,199,199
	dc.b 199,199,199,199,199,199,198,198,198,197,197,196,196,195,195,194
	dc.b 193,192,192,191,190,189,188,187,186,185,184,183,181,180,179,178
	dc.b 176,175,174,172,171,169,168,166,165,163,162,160,158,157,155,153
	dc.b 152,150,148,146,145,143,141,139,137,136,134,132,130,128,126,125

cosine dc.b 100,100,100,100,100,100,101,101,101,102,102,103,104,104,105,106
	dc.b 107,108,109,110,111,112,113,114,115,116,117,119,120,121,122,123
	dc.b 125,126,127,128,130,131,132,133,134,135,136,138,139,140,141,141
	dc.b 142,143,144,145,145,146,147,147,148,148,149,149,149,149,149,149
	dc.b 149,149,149,149,149,149,148,148,147,147,146,146,145,144,144,143
	dc.b 142,141,140,139,138,137,136,135,134,133,131,130,129,128,126,125
	dc.b 124,123,122,120,119,118,117,116,114,113,112,111,110,109,108,107
	dc.b 106,106,105,104,103,103,102,102,101,101,100,100,100,100,100,100
	dc.b 100,100,100,100,100,100,101,101,102,102,103,103,104,105,106,106
	dc.b 107,108,109,110,111,112,113,114,116,117,118,119,120,122,123,124
	dc.b 125,126,128,129,130,131,133,134,135,136,137,138,139,140,141,142
	dc.b 143,144,144,145,146,146,147,147,148,148,149,149,149,149,149,149
	dc.b 149,149,149,149,149,149,148,148,147,147,146,145,145,144,143,142
	dc.b 141,141,140,139,138,136,135,134,133,132,131,130,128,127,126,125
	dc.b 123,122,121,120,119,117,116,115,114,113,112,111,110,109,108,107
	dc.b 106,105,104,104,103,102,102,101,101,101,100,100,100,100,100,100

	org $3800
;	INCBIN "fontbin"
;	org $2000
	INCBIN "flipfont"
	org $BC00
    INCBIN "indiepoo.bin"
	
